import dev.baseio.security.CapillaryInstances
import dev.baseio.security.toPrivateKey
import kotlinx.coroutines.runBlocking
import kotlin.test.Test
import kotlin.test.assertNotNull
import kotlin.test.assertTrue

class TestCapillaryInitialization {

    val publicArray :Array<Int>  = arrayOf(48,-126,1,34,48,13,6,9,42,-122,72,-122,-9,13,1,1,1,5,0,3,-126,1,15,0,48,-126,1,10,2,-126,1,1,0,-88,12,-97,-14,-11,-103,57,100,88,-70,112,8,-122,-50,102,54,98,-59,55,-22,-107,-111,123,-57,-90,46,-80,-18,-35,91,24,13,-46,32,38,113,-47,-72,8,46,110,61,-56,111,-101,-124,-106,27,115,97,90,-104,14,-56,-79,7,76,57,107,-72,-65,-81,-13,-40,108,32,106,-118,-18,98,57,26,-44,67,-61,-77,-16,14,18,110,39,105,78,42,31,-128,112,-126,-59,125,74,121,67,97,89,-4,-35,97,-5,92,73,-15,-20,-93,-84,102,-32,-96,-42,0,89,91,15,-64,-77,-95,108,-12,83,120,-46,53,34,55,-115,-93,-62,-86,57,-107,40,3,15,41,104,-53,-20,96,7,-50,-74,89,-60,35,126,10,-7,55,-104,-20,29,49,67,-8,-22,109,-98,-110,83,124,-81,18,73,-110,121,2,-61,91,-46,18,-29,-28,126,44,-22,-6,45,105,102,50,50,25,-125,41,127,-113,127,71,-16,-75,17,31,51,7,31,-61,71,54,112,-74,40,-35,94,127,38,-48,-91,99,-105,64,-124,15,98,-64,76,-92,-7,-47,42,11,-17,-64,76,-22,7,76,-105,-87,50,91,-128,38,-60,52,-98,107,-128,-21,64,-3,4,20,20,-78,57,8,67,-113,-7,29,-46,-46,-74,-99,-49,111,2,3,1,0,1)
    val privateArray  :Array<Int> = arrayOf(48,-126,4,-68,2,1,0,48,13,6,9,42,-122,72,-122,-9,13,1,1,1,5,0,4,-126,4,-90,48,-126,4,-94,2,1,0,2,-126,1,1,0,-88,12,-97,-14,-11,-103,57,100,88,-70,112,8,-122,-50,102,54,98,-59,55,-22,-107,-111,123,-57,-90,46,-80,-18,-35,91,24,13,-46,32,38,113,-47,-72,8,46,110,61,-56,111,-101,-124,-106,27,115,97,90,-104,14,-56,-79,7,76,57,107,-72,-65,-81,-13,-40,108,32,106,-118,-18,98,57,26,-44,67,-61,-77,-16,14,18,110,39,105,78,42,31,-128,112,-126,-59,125,74,121,67,97,89,-4,-35,97,-5,92,73,-15,-20,-93,-84,102,-32,-96,-42,0,89,91,15,-64,-77,-95,108,-12,83,120,-46,53,34,55,-115,-93,-62,-86,57,-107,40,3,15,41,104,-53,-20,96,7,-50,-74,89,-60,35,126,10,-7,55,-104,-20,29,49,67,-8,-22,109,-98,-110,83,124,-81,18,73,-110,121,2,-61,91,-46,18,-29,-28,126,44,-22,-6,45,105,102,50,50,25,-125,41,127,-113,127,71,-16,-75,17,31,51,7,31,-61,71,54,112,-74,40,-35,94,127,38,-48,-91,99,-105,64,-124,15,98,-64,76,-92,-7,-47,42,11,-17,-64,76,-22,7,76,-105,-87,50,91,-128,38,-60,52,-98,107,-128,-21,64,-3,4,20,20,-78,57,8,67,-113,-7,29,-46,-46,-74,-99,-49,111,2,3,1,0,1,2,-126,1,0,54,-38,20,21,90,59,-2,-61,53,-64,-7,19,-105,104,-28,109,9,21,69,-104,-96,-28,97,74,60,0,-114,-119,17,32,-116,59,-22,-93,-54,-40,-88,-13,16,92,-109,104,64,53,-55,-59,-33,-73,43,20,-110,93,2,-86,88,58,65,19,-105,9,49,44,78,4,12,-37,17,-37,-78,78,-58,67,-17,24,5,87,-124,-38,27,2,-16,-125,75,91,-83,119,-97,-127,-41,-45,123,13,20,-60,-64,122,44,-118,-80,96,-95,-44,65,0,-11,-93,-120,-37,-122,-82,-117,124,17,42,-67,-105,73,-72,-128,76,118,20,-104,-52,24,67,-27,36,97,-51,-20,-16,93,-94,1,62,82,-93,-117,126,89,-19,-91,114,92,-38,40,71,59,91,-39,-58,74,43,-55,47,14,60,-5,120,-4,0,73,-92,5,17,-62,52,-124,14,-123,-27,73,-6,79,76,43,-56,76,-23,74,-54,-48,-24,-100,-70,-105,-88,80,-54,112,-91,31,-127,64,-103,23,-120,39,27,-128,112,91,70,44,97,-44,40,-104,-107,-53,68,-81,61,-99,99,-21,35,-6,-107,-92,94,9,72,-24,-12,27,-61,-59,70,119,-57,58,42,62,-73,-20,-107,-73,19,95,79,26,-36,-86,-80,-57,126,-11,-125,46,23,72,118,97,-67,2,-127,-127,0,-26,60,-58,42,56,-102,-39,120,89,125,41,81,-98,-73,29,-62,-48,-83,6,-33,6,-109,-54,-24,8,84,92,-77,-47,70,-4,55,83,91,108,-91,47,-33,-28,-31,-37,-48,56,-18,-3,-32,-106,-62,-93,115,-54,-78,57,101,-26,-125,19,-73,123,101,114,18,81,-47,99,102,111,98,104,9,83,1,48,-44,108,105,-45,82,58,-61,-55,-112,28,46,-49,57,8,-85,-78,-14,-74,90,117,-3,27,98,25,46,-117,10,-49,60,-9,25,-117,-94,103,13,-20,-88,52,14,15,25,126,-50,83,-2,26,-19,11,64,-16,-118,105,-120,-15,5,2,-127,-127,0,-70,-38,115,-32,-36,-125,30,-37,-13,8,-100,-45,46,55,-62,68,122,127,-38,-54,31,86,108,74,27,116,-92,-36,81,23,42,-88,47,99,-48,80,-54,-73,46,-15,20,-1,-122,-125,-67,-88,-32,21,-8,47,105,-38,38,48,51,-87,68,-110,8,6,-52,93,-31,-66,-53,14,-63,-12,80,112,64,86,-80,123,-43,-8,-70,110,94,38,46,-95,-48,53,-125,-69,-35,-44,-13,19,28,-108,-46,1,-6,124,-39,-5,104,57,113,34,-35,-19,-119,-67,124,86,99,-100,-26,77,60,-67,-48,43,5,-87,-45,61,-116,39,80,81,29,75,56,-29,2,-127,-128,126,5,-123,-14,86,73,107,-1,-109,-4,14,65,-66,-66,60,108,6,12,-81,86,36,35,-127,76,-64,66,108,-5,127,-15,122,-36,77,-92,29,51,-51,-96,-97,-121,-128,-23,-40,63,-8,118,-106,14,-77,-87,13,-87,-64,1,38,-53,88,95,118,11,113,4,-42,3,-26,-124,-117,51,49,-2,-24,-112,30,74,39,-115,69,62,29,44,77,-121,-77,-27,107,71,-84,-105,78,-69,-53,84,120,-128,-78,28,95,-20,57,-17,16,-64,46,0,-83,-115,-105,26,-24,14,-87,111,-120,-108,75,-12,99,-59,18,-73,-19,16,-2,-104,-60,107,80,-127,2,-127,-128,5,-108,98,99,115,-110,66,-56,-92,-96,60,54,-98,41,-78,22,99,102,15,-3,123,36,20,-123,-67,-2,36,-78,35,-123,-62,-109,85,30,-16,-24,-120,-75,33,-92,-73,80,-50,14,127,10,92,-18,-85,3,-105,112,-103,53,85,69,-105,-77,-104,-93,-61,84,-122,90,49,44,22,-92,-102,6,80,21,-122,-99,-100,13,26,92,19,89,-90,-120,-44,115,-44,-92,54,-126,-106,99,-102,-75,-30,-13,-122,44,86,66,8,-95,-74,124,41,14,95,-49,-107,-73,-22,-81,-109,-68,-8,-76,94,83,-6,-114,80,-83,-124,-46,-29,-74,24,94,-41,-85,2,-127,-128,83,36,55,-55,-6,126,-48,-9,10,119,102,-116,-17,122,52,-43,45,26,-23,-97,-70,-61,116,-13,19,-102,56,-124,-76,-79,-114,-77,27,-66,-126,-1,71,58,-7,-107,62,-30,33,-122,-98,58,-20,-42,-58,-106,66,-28,-20,92,-83,72,-28,99,59,-61,13,25,-14,24,-51,22,-73,-18,-23,-128,-23,-40,111,66,3,82,110,52,-51,-21,121,50,-99,-27,-110,-68,60,118,-123,-73,44,-51,75,-38,-116,100,-27,-96,-76,61,24,24,-76,-37,27,-107,68,-57,4,72,-120,28,-2,122,48,89,85,-33,-12,118,-75,116,94,-2,-68,-127,-56,24)



    @Test
    fun `when user and channel keypair is created then we encr and decr works!`() {
        runBlocking {
            with(CapillaryInstances.getInstance("anmol", isTest = true)) {
              val publicKey = publicKey()
              val privateKey = privateKey()

              val publicKeyJVM = getPublicKeyFromBytes(publicArray.map { it.toByte() }.toByteArray())
              val privateKeyJvm =  privateArray.map { it.toByte() }.toByteArray().toPrivateKey().encoded
              val encryptedChannelPrivateKey = encrypt(privateKeyJvm,publicKey)

              val decryptedChannelPrivateKey = decrypt(Pair(encryptedChannelPrivateKey.first, encryptedChannelPrivateKey.second), privateKey)
              val encrypted = encrypt( "anmolverma".encodeToByteArray(),  publicKeyJVM)
              assertNotNull(encrypted)

              val decrypted = decrypt(Pair(encrypted.first, encrypted.second), decryptedChannelPrivateKey.toPrivateKey())
              assertNotNull(decrypted)

              val str = decrypted.decodeToString()
              println(str)
            }
        }
    }
}