import dev.baseio.security.CapillaryInstances
import dev.baseio.security.toPrivateKey
import dev.baseio.security.toPublicKey
import kotlinx.coroutines.runBlocking
import kotlin.test.Test
import kotlin.test.assertNotNull
import kotlin.test.assertTrue

class TestCapillaryInitialization {
    val privateBytes = arrayOf<Int>(48,-126,4,-67,2,1,0,48,13,6,9,42,-122,72,-122,-9,13,1,1,1,5,0,4,-126,4,-89,48,-126,4,-93,2,1,0,2,-126,1,1,0,-45,4,-122,-126,-73,54,-98,-44,-63,43,-48,103,96,-117,107,109,-50,-43,-122,-69,-63,-67,15,-113,106,-32,11,-21,-93,91,-26,-55,107,1,-115,45,0,1,95,-58,24,-56,-50,112,55,-119,1,-116,-110,-86,-66,31,-54,-125,65,125,-36,32,115,-69,-83,-36,60,-72,86,-20,-121,-104,-2,44,-104,126,68,0,-45,-41,0,71,25,-101,-14,-81,75,81,-122,-61,46,-93,112,-41,-37,107,35,52,109,18,103,-123,-58,85,98,62,91,-14,-80,-26,-30,-29,99,55,59,-109,13,62,51,-95,12,-13,-117,41,-104,-37,78,1,11,37,53,-106,40,-46,-83,49,27,68,-59,-3,28,114,105,-2,-102,-33,-109,36,121,4,105,-58,-33,-54,68,-3,-34,90,-25,-17,39,125,-83,-15,-12,-92,103,-2,-34,-33,-40,-117,-85,-77,1,-28,-75,-91,-59,-124,-5,-66,124,3,-3,50,-36,28,-1,60,4,-81,-83,-117,62,35,93,37,126,55,-61,61,99,91,-63,-30,122,75,-78,-107,-45,31,-89,19,38,108,-41,36,-33,-55,-71,-67,59,-91,44,-49,-126,-42,57,-78,-77,4,122,-93,27,88,-67,12,90,-43,6,-1,-12,83,-28,32,124,119,95,-96,87,-110,-85,-69,-49,-126,42,-128,60,-127,2,3,1,0,1,2,-126,1,0,34,67,-17,-37,-74,8,-122,-114,33,-72,13,-91,91,-58,7,-15,-46,-50,85,-116,-109,-113,49,-63,-90,39,47,-120,90,4,-120,91,88,-90,-19,-41,-54,-46,110,76,-22,-91,96,-16,83,-12,73,110,28,58,-31,-104,-93,-9,-32,96,-95,-88,27,98,-12,126,120,-43,-82,55,-58,101,15,-111,10,74,38,-100,-61,-55,123,-32,15,-58,-123,7,-10,1,13,19,16,-75,-75,-109,55,-84,20,17,101,76,-63,-58,-75,72,20,37,-16,36,94,-103,127,106,81,40,28,-30,106,26,25,-92,35,72,64,-26,-58,77,-122,67,33,30,47,-81,32,-71,-70,66,-28,83,-46,-88,39,-23,79,-93,103,-81,94,-16,118,-37,-41,69,103,-76,74,38,117,37,36,-12,-12,117,-35,-4,-45,-104,-11,-96,61,56,75,29,-58,-39,53,17,91,-33,-48,-68,-65,-110,14,94,48,16,-120,-38,35,101,-40,-126,-116,-19,-116,-13,56,-45,-7,-108,-114,-89,-36,-67,107,82,-112,60,122,20,-49,-10,-57,-73,-67,-12,75,2,-125,-77,-89,-70,-79,51,-101,15,32,25,-20,-16,81,127,125,-74,111,-17,114,-65,119,-100,-44,91,-109,-59,-3,101,-4,-103,-125,101,-61,46,-22,57,-38,27,-18,20,-38,73,2,-127,-127,0,-3,109,39,63,-28,29,-115,55,36,-123,29,-109,83,-78,-70,-2,-66,81,99,123,-113,-21,-84,-50,-111,8,-97,126,35,119,50,97,59,-11,51,-66,27,-9,-21,89,31,-80,49,24,-113,-75,-18,-123,127,-24,-114,-51,52,111,-22,37,-3,51,23,125,-113,-110,95,-112,-1,101,79,-36,-116,96,91,-18,-12,58,34,-10,76,-1,-66,-79,63,13,119,-69,-54,10,-80,13,-75,-3,-1,123,-27,-22,108,0,-102,-78,29,-38,-43,27,111,-50,22,-124,94,87,-9,125,80,-115,45,63,-48,87,-3,8,96,-52,86,-85,4,99,-48,-116,-32,79,2,-127,-127,0,-43,41,30,-82,58,-4,35,117,-27,-51,68,106,85,3,54,-117,-82,-111,100,70,11,93,-51,-37,-28,-31,-90,-19,-7,-124,109,91,22,92,-74,68,-44,-103,28,-70,-52,-127,40,100,-7,-103,32,-18,113,-25,-57,1,-2,-22,-38,-1,-25,11,122,-119,-128,42,47,-73,-125,112,-18,-104,-103,61,-90,-92,119,113,79,-2,-30,-104,-83,62,15,-22,-3,16,98,110,-89,24,41,80,68,-97,36,-85,-111,126,45,-116,-47,4,-122,17,33,-27,-26,-80,-119,15,-2,58,-124,-113,-5,-46,85,-46,-78,35,-111,-96,-22,123,16,41,-40,106,-110,47,2,-127,-127,0,-20,12,102,121,-95,77,81,66,98,118,-58,-44,122,42,72,-8,-116,102,-100,-91,-13,-88,-51,-35,-35,-61,77,99,-99,63,34,34,-27,72,-1,-9,-4,111,16,-68,-125,-62,-122,8,93,-101,84,-34,-18,3,-68,55,48,-73,105,62,23,56,38,-110,34,79,113,74,74,72,-96,121,74,27,90,-90,24,-65,-87,-33,6,91,83,-48,30,109,-71,-17,-91,66,13,55,-56,35,28,123,-41,-20,96,-54,-77,76,98,120,120,-12,-60,80,14,51,30,-7,10,-95,-93,-116,-53,-17,-37,108,-119,87,-21,105,-120,-12,99,-13,96,-58,71,11,2,-127,-128,85,-36,48,77,-127,-40,-39,-9,-67,78,-57,70,5,100,59,-18,91,-84,-104,-75,86,18,-68,-66,-36,28,-64,126,-114,-56,-10,-69,127,-16,108,66,-95,87,-29,40,-93,3,75,96,16,-31,-53,80,0,117,-103,-59,-122,6,-41,-101,-56,86,-23,78,-59,95,56,-59,52,-98,-94,-100,-72,-19,10,88,-88,-5,-19,122,-1,-114,-4,9,73,-92,31,-73,31,-50,-18,99,95,16,-61,-13,78,116,5,48,-53,-20,50,-83,29,-53,124,-39,-5,-24,19,-19,107,59,-22,-11,-116,59,-106,-14,61,106,-14,87,-36,-37,33,17,-103,-24,-93,101,2,-127,-128,67,-91,75,-97,-119,-65,-78,91,-45,70,-120,127,-127,-105,-94,118,75,-49,-54,23,-74,63,-108,78,90,97,54,-80,-2,-48,21,-33,-102,-49,79,118,10,28,-41,-114,-77,-5,-102,-95,104,-47,-72,3,-22,79,67,-101,82,56,111,-63,49,92,91,-108,121,43,32,-53,-89,78,-95,40,-116,9,-29,-34,28,-118,19,27,-70,100,111,-17,-8,96,118,14,-15,75,45,62,17,102,-80,92,8,39,87,49,-109,-97,59,-42,21,115,94,-81,-87,-97,-106,-20,-76,-44,-96,91,-36,78,105,-33,118,-100,-102,-30,22,-101,7,100,-29,47,4,22)
    val publicKey = arrayOf<Int>(48,-126,1,34,48,13,6,9,42,-122,72,-122,-9,13,1,1,1,5,0,3,-126,1,15,0,48,-126,1,10,2,-126,1,1,0,-45,4,-122,-126,-73,54,-98,-44,-63,43,-48,103,96,-117,107,109,-50,-43,-122,-69,-63,-67,15,-113,106,-32,11,-21,-93,91,-26,-55,107,1,-115,45,0,1,95,-58,24,-56,-50,112,55,-119,1,-116,-110,-86,-66,31,-54,-125,65,125,-36,32,115,-69,-83,-36,60,-72,86,-20,-121,-104,-2,44,-104,126,68,0,-45,-41,0,71,25,-101,-14,-81,75,81,-122,-61,46,-93,112,-41,-37,107,35,52,109,18,103,-123,-58,85,98,62,91,-14,-80,-26,-30,-29,99,55,59,-109,13,62,51,-95,12,-13,-117,41,-104,-37,78,1,11,37,53,-106,40,-46,-83,49,27,68,-59,-3,28,114,105,-2,-102,-33,-109,36,121,4,105,-58,-33,-54,68,-3,-34,90,-25,-17,39,125,-83,-15,-12,-92,103,-2,-34,-33,-40,-117,-85,-77,1,-28,-75,-91,-59,-124,-5,-66,124,3,-3,50,-36,28,-1,60,4,-81,-83,-117,62,35,93,37,126,55,-61,61,99,91,-63,-30,122,75,-78,-107,-45,31,-89,19,38,108,-41,36,-33,-55,-71,-67,59,-91,44,-49,-126,-42,57,-78,-77,4,122,-93,27,88,-67,12,90,-43,6,-1,-12,83,-28,32,124,119,95,-96,87,-110,-85,-69,-49,-126,42,-128,60,-127,2,3,1,0,1)

    @Test
    fun `when user and channel keypair is created then we encr and decr works!`() {
        runBlocking {
            with(CapillaryInstances.getInstance("anmol", isTest = true)) {
                val publicKeyUser = publicKey()
                assertNotNull(publicKeyUser)
                val privateKeyUser = privateKey()
                assertNotNull(privateKeyUser)

                val encrypted = encrypt("Anmol".encodeToByteArray(), publicKey.map { it.toByte() }.toByteArray().toPublicKey())
                val decrypted = decrypt(encrypted, privateBytes.map { it.toByte() }.toByteArray().toPrivateKey())
                assertTrue(decrypted.contentEquals("Anmol".encodeToByteArray()))
            }
        }
    }

    @Test
    fun `ios public key for encrypting `(){

    }

    @Test
    fun `run on JVM when user and channe`() {
        runBlocking {
            with(CapillaryInstances.getInstance("anmol", isTest = true)) {
                val publicKeyUser = publicKey()
                assertNotNull(publicKeyUser)
                val privateKeyUser = privateKey()
                assertNotNull(privateKeyUser)

                val encrypted = encrypt(privateBytes.map { it.toByte() }.toByteArray(), publicKeyUser)
                println(encrypted.first)
                println(encrypted.second)
            }
        }
    }
}