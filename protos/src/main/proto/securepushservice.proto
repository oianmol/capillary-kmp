syntax = "proto3";

package capillary.kmp;

option java_multiple_files = true;

message ByteArrayElement{
  int32 byte = 1;
}

message Empty {
  string nothing = 1;
}

// The types of public keys.
enum KeyAlgorithm {
  RSA_ECDSA = 0;
}

// Container for a RSA hybrid encryption ciphertext.
message HybridRsaCiphertext {
  repeated ByteArrayElement symmetrickeyciphertext = 1;
  repeated ByteArrayElement payloadciphertext = 2;
}

// Container for a raw RSA public key and its associated metadata.
message WrappedRsaEcdsaPublicKey {
  string padding = 1;
  repeated ByteArrayElement keybytes = 2;
}

// Container for a Capillary public key and its associated metadata.
message SlackPublicKey {
  repeated ByteArrayElement keybytes = 4;
}

// Container for a Slack ciphertext and its associated metadata.
message SlackCiphertext {
  repeated ByteArrayElement ciphertext = 4;
}

// A request to register the given public key for the specified user.
message AddOrUpdatePublicKeyRequest {
  string deviceid = 1;
  KeyAlgorithm algorithm = 2;
  repeated ByteArrayElement keyBytes = 3;
}

// A request to add the given user or update the FCM token of an existing user.
message AddOrUpdateUserRequest {
  string deviceid = 1;
  string token = 2;
}

service SecurePushService {
  rpc addOrUpdateUser (AddOrUpdateUserRequest) returns (Empty);
  rpc addOrUpdatePublicKey (AddOrUpdatePublicKeyRequest) returns (Empty);
}